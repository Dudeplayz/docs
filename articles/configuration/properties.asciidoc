---
title: Properties
description: Vaadin applications have configuration properties that change their behavior.
order: 10
---

= Configuration Properties

Vaadin applications have configuration properties that change their behavior. Use either system properties or servlet initialization parameters to set them. See the <<properties,full list of properties>>.

For Spring-based applications, there are <<{articles}/integrations/spring/configuration#, Spring-specific instructions>> available.

[[system-properties]]

== Using System Properties

When using Java's system properties to set the Vaadin application parameters, the `vaadin.` prefix needs to be specified before the parameter names. The following is an example of how to set a system property when executing a Maven goal from the command-line:

----
mvn jetty:run -Dvaadin.pnpm.enable=true
----

System properties can be configured for Maven plugin executions. For instance, the following sets a Vaadin-specific system property when the Jetty Maven plugin is run:

[source,xml]
----
<plugin>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-maven-plugin</artifactId>
    <configuration>
        <systemProperties>
            <systemProperty>
                <name>vaadin.pushMode</name>
                <value>disabled</value>
            </systemProperty>
        </systemProperties>
    </configuration>
</plugin>
----

== Using Servlet Initialization Parameters

Another option is to use servlet initialization parameters. You can use the Servlet 3.0 `@WebServlet` annotation, which requires you to configure your own servlet. Otherwise, it's done automatically by Vaadin with default parameter values.

[source,java]
----
@WebServlet(urlPatterns = "/*", name = "myservlet", asyncSupported = true, loadOnStartup = 1,
    initParams = { @WebInitParam(name = "pnpm.enable", value = "true") })
public class MyServlet extends VaadinServlet {
}
----

Yet another approach is to use the [filename]`web.xml` file like so:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<web-app
  id="WebApp_ID" version="3.0"
  xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

  <servlet>
    <servlet-name>myservlet</servlet-name>
    <servlet-class>
        com.vaadin.flow.server.VaadinServlet
    </servlet-class>
    <load-on-startup>1</load-on-startup>

    <init-param>
      <param-name>pnpm.enable</param-name>
      <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>myservlet</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>
----

.System properties override servlet parameters
[NOTE]
When a system property and a servlet parameter have the same name, the system property is used.

[[properties]]
== Configuration Properties

The following list contains the properties that are defined in the [classname]`com.vaadin.server.DeploymentConfiguration` and [classname]`com.vaadin.server.Constants` classes, in alphabetical order.

.Spring Boot
[NOTE]
If you use Spring Boot, you should add the `vaadin.` prefix, for example, `vaadin.productionMode=true`.

[cols="1,4,1"]
|===
|Property name
|Description
|Default value

|`brotli`
|Should pre-compressed https://github.com/google/brotli[Brotli] files be used, if accepted by the browser. Brotli files are created during production build and this property is only used in production mode. Set to `false` to serve uncompressed static resources.
|`true`

|`ci.build`
|In production frontend build `npm ci` is run instead of `npm i`, or if pnpm is used the install command is run with `--frozen-lockfile` parameter. When set to `true`, the build will check and fail if there is a mismatch of versions or packages between the `package.json` and `package-lock.json`.
|`false`

|`closeIdleSessions`
|When set to `true`, the Vaadin session is closed if no UI is active. A UI is active if it is open on the client-side and has some activity in addition to heartbeat requests. By default, heartbeat requests cause the Vaadin session to stay open even if there is no user interaction. If `closeIdleSessions` is `true`, the Vaadin session closes after session timeout without user interaction. See also `heartbeatInterval`. 
|`false`

|`devmode.liveReload.enabled`
|When using a server-side <<live-reload/index#, live reload tool>>, the browser is automatically refreshed after the code is reloaded on the server after a rebuild. Set to `false` to disable the automatic browser reload. Only applies to development mode. 
|`true`

|`devmode.optimizeBundle`
|In development mode, all front-end resources in the classpath are included in the generated bundle by default. When set to `true` the front-end build creates an optimized bundle by including only front-end resources that are used from the application entry points. It uses bytecode scanning, which increases application start-up time. Set to `false` to skip the optimisation. 
|`false`

|`devmode.sessionSerialization.enabled`
|When session serialization is enabled, [classname]`UI` instances and registered [classname]`StreamResource` instances are serialized or deserialized when restarting the development server. Enabling the property allows, for example, access control information to be preserved during development, so that you don't need to log in again for each individual change. Only used in development mode.
|`false`

|`devmode.usageStatistics.enabled`
|Enables Vaadin to collect usage statistics that are used to guide development further. Statistics are collected based on features used in the application. No data is collected in production mode. Some usage statistics through the web browser. See the documentation for https://github.com/vaadin/vaadin-usage-statistics[the client-side collector] for information on how to opt out of that part of the usage statistics collection. Only used in development mode.
|`true`

|`disable.automatic.servlet.registration`
|Disable automatic registration of servlets that are needed for Vaadin application to work. If disabled, you should register Vaadin servlets yourself.
|`false`

|`disable-xsrf-protection`
|Disbale cross-site request forgery protection. The protection is enabled by default, It is not recommended to disable protection, but you may want to disable it for a certain type of testing.
|`false`

|`eagerServerLoad`
|Enable the client-side bootstrap page should also include the initial UIDL JSON data fragment.
|`false`

|`frontend.hotdeploy`
|Enable development using the front-end development server instead of using an application bundle. Only applies to development mode.
|`false`

|`heartbeatInterval`
|UIs that are open on the client-side send a regular heartbeat to the server indicating that they are still alive, even when there is no ongoing user interaction. When the server doesn't receive a valid heartbeat from a given UI within a certain amount of time, it removes that UI from the session. The interval value is expressed in `seconds`. See also `closeIdleSessions`.
|300 seconds (5 minutes)

|`i18n.provider`
|Fully qualified class name of I18N provider property. To use localization and translation of strings, the application should implement `I18NProvider` interface and define the class name in the property `i18n.provider`. See the <<{articles}/advanced/i18n-localization#, Localization>> documentation for more details.
|`null`

|`maxMessageSuspendTimeout`
|The maximum time in `milliseconds` that the client waits for predecessors of an out-of-sequence message before considering them missing and requesting a full resynchronization of the state from the server. For example, when the server sends adjacent `XmlHttpRequest` responses and pushes messages over a low-bandwidth connection, the client may receive the messages out of sequence. Increase this value if your application experiences excessive resynchronization requests. However, that degrades the UX due to flickering and loss of client-side-only states, such as scroll position.
|5000 ms

|`pnpm.enable`
|Enable `pnpm` instead of `npm` to resolve and download front-end dependencies. By default, this flag is set to `false`, and `npm` is used. Setting it to `true` enables `pnpm`. See how to <<development-mode/npm-pnpm#, switch between npm and pnpm>>.
|`false`

|`productionMode`
|Sets the application to work in production mode. Disables most of the logged information that appears on the server and browser console to improve performance. Development mode JavaScript functions aren't exported. A `push` is given as a minified JavaScript file instead of a full-size one, and static resources are cached. See <<../production#,Deploying to Production>> for more information. Set to `true` when building application for public deployment.
|`false`

|`pushLongPollingSuspendTimeout`
|Timeout in `milliseconds ` for network request when using the long polling transport. If you have long polling enabled with a proxy with a timeout, you want `pushLongPollingSuspendTimeout` to be shorter than proxy timeout to make clients reconnect properly.
|`-1` (no timeout)

|`pushMode`
|Enable the server push. The permitted values are "disabled", "manual" or "automatic". See <<{articles}/advanced/server-push#, Server Push>> for more information.
|`disabled`

|`pushServletMapping`
|Servlet mapping used for bidirectional ("push") client-server communication. Some Java application servers require special context e.g. for websockets and you can specify it here.
|`""`

|`requestTiming`
|Include some basic timing information in each response that can be used for performance testing. 
|`true` for development mode, `false` for production mode.


|`syncIdCheck`
|Enable sync ID checking. The sync ID is used to handle situations where the client sends a message to a connector that has been removed from the server. This is `true` by default, and you should disable it only if your application don't need to stay in sync and suffers from bad network connections. 
|`true`


|`webComponentDisconnect`
|Number of `seconds` that a Vaadin application embedded as a web component waits for a reconnect before removing the server-side component from memory.
|300 seconds (5 minutes)
|===

[discussion-id]`27BF72FB-1E23-42B0-B540-A602F9AD4571`
