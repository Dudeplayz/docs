---
title: Getting Started
order: 2
layout: page
---

[[appseckit.introduction]]
= Getting Started with AppSec Kit

AppSec Kit monitors your application dependencies for vulnerabilities. It lets you visualize details on found vulnerabilities and store your analysis to share with other developers.

This is a step-by-step guide on how to use AppSec Kit in an application


=== Add AppSec Kit Dependency

To start, you need to add AppSec Kit as a dependency to your application. For example, to add to a Maven project, do something like this:

.pom.xml
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>appsec-kit-v7</artifactId>
    <version>1.0.1</version>
</dependency>
----

.Version Number
[NOTE]
See the https://github.com/vaadin/appsec-kit/releases[AppSec Kit releases page] for the latest version, or a different version of the dependency.


=== Add `cyclonedx-maven-plugin`

To be able to monitor the application dependencies, AppSec Kit needs a Software Bill of Materials (SBOM) file. This file contains information about the dependencies and their transitives.

To generate the SBOM file, you need to add the link:https://github.com/CycloneDX/cyclonedx-maven-plugin[cyclonedx-maven-plugin] to the plugins:

.pom.xml
[source,xml]
----
<plugin>
    <groupId>org.cyclonedx</groupId>
    <artifactId>cyclonedx-maven-plugin</artifactId>
    <version>2.7.7</version>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>makeAggregateBom</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <projectType>library</projectType>
        <schemaVersion>1.4</schemaVersion>
        <includeBomSerialNumber>true</includeBomSerialNumber>
        <includeCompileScope>true</includeCompileScope>
        <includeProvidedScope>true</includeProvidedScope>
        <includeRuntimeScope>true</includeRuntimeScope>
        <includeSystemScope>true</includeSystemScope>
        <includeTestScope>false</includeTestScope>
        <includeLicenseText>false</includeLicenseText>
        <outputReactorProjects>true</outputReactorProjects>
        <outputFormat>json</outputFormat>
        <outputName>bom</outputName>
        <outputDirectory>${project.build.outputDirectory}/resources</outputDirectory>
        <verbose>false</verbose>
    </configuration>
</plugin>
----

The SBOM file should be generated in the `/resources` sub-directory in the project's output directory. It's a `json` file with the `bom` file name. The plugin is already configured to do it this way.


=== Start the Application

AppSec Kit isn't enabled in production mode. Therefore, you need to start your application in debug mode -- or in development mode.

By default, Vaadin 7 applications start in link:https://vaadin.com/docs/v7/framework/application/application-environment#application.environment.parameters.production-mode[debug mode]. You don't need to enable this, explicitly.

To start the application, execute the following from the command-line:

----
mvn jetty:run
----


=== Notification Dialog

After the application has started, AppSec Kit analyzes the dependencies, collects the vulnerabilities if any exists, and displays the <<getting-started-notification-dialog>> where you can open the `UI` in a new tab.

To get the notification dialog you should configure https://vaadin.com/docs/v7/framework/advanced/advanced-push[server push] for a `UI` to get notified when new vulnerabilities are found. You can achieve this by adding the `@Push` annotation to a UI class which configures the UI for automatic push:

[source,java]
----
@Push
public class ExampleUI extends UI {
    // ...
}
----

The server push support in Vaadin requires the separate Vaadin Push library. In Maven, add the following dependency:

.pom.xml
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-push</artifactId>
    <version>${vaadin.version}</version>
</dependency>
----

[[getting-started-notification-dialog]]
.AppSec Kit Notification Dialog
image::img/notification-dialog.png[]

.AppSec Kit UI
[TIP]
You can also navigate to the `UI` using the `vaadin-appsec-kit` URL parameter. For example, on your localhost, do something like this: link:http://localhost:8080/?vaadin-appsec-kit[http://localhost:8080/?vaadin-appsec-kit].



=== AppSec Kit UI

The AppSec Kit UI has views for seeing vulnerabilities and dependencies of which you should be aware.

==== Vulnerabilities View

The starting page of the UI is the <<getting-started-vulnerabilities-tab>> where you can see the collected vulnerabilities if any exist. They're shown in a grid view which has different columns to help identify the vulnerability, the dependency in which it has been found, the severity, the risk score and some analyses. You can `Filter` the vulnerabilities by using the dependency, developer analysis, and severity level filters. You can also reset the filters by clicking on the `Clear` button.

You can run a new scan to update the collected vulnerabilities by clicking the `Scan now` button. After it has finished the scan, the `Last Scan` date and time is updated.

If you want to see more details about a vulnerability you should select the row containing the vulnerability and after clicking the `Show details` button, or you can just double-click on the given row. Then the `Vulnerability Details View` will be opened.

[[getting-started-vulnerabilities-tab]]
.AppSec Kit Vulnerabilities View
image::img/vulnerabilities-tab.png[]


==== Vulnerability Details View

In the <<getting-started-vulnerability-details-view>> you can find more details, a description, references and developer analysis of the vulnerability. In the `Developer analysis` on the right side, you can set the `Vulnerability status` and add a description to it. You can save your changes by clicking the `Save` button.

[[getting-started-vulnerability-details-view]]
.AppSec Kit Vulnerability Details View
image::img/vulnerability-details-view.png[]


==== Dependencies View

To see your application dependencies, open the <<getting-started-dependencies-tab>> where you can find a list. They are also shown in a grid view with all the important columns to identifying them. You can use the `Filter` functionality here, too.

[[getting-started-dependencies-tab]]
.AppSec Kit Dependencies View
image::img/dependencies-tab.png[]
