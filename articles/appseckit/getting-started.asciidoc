---
title: Getting Started
order: 2
layout: page
---


[[appseckit.introduction]]
= Getting Started with AppSec Kit

AppSec Kit can monitor your application dependencies for vulnerabilities. It lets you visualize details of found vulnerabilities and store your analysis to share with other developers.

This step-by-step guide will show you how to use AppSec Kit in an application.


== Add AppSec Kit Dependency

To start, you need to add AppSec Kit as a dependency to your application. For example, to add to a Maven project, you'd add something like this to your [filename]`pom.xml` file:

.pom.xml
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>appsec-kit-v7</artifactId>
    <version>1.0.1</version>
</dependency>
----

.Version Number
[NOTE]
See the https://github.com/vaadin/appsec-kit/releases[AppSec Kit releases page] for the latest version, or a different version of the dependency.


== Add `cyclonedx-maven-plugin`

To be able to monitor the application dependencies, AppSec Kit needs a Software Bill of Materials (SBOM) file. This file contains information about the dependencies and their transitives.

To generate the SBOM file, you need to add to your [filename]`pom.xml` file, the link:https://github.com/CycloneDX/cyclonedx-maven-plugin[cyclonedx-maven-plugin] to the plugins:

.pom.xml
[source,xml]
----
<plugin>
    <groupId>org.cyclonedx</groupId>
    <artifactId>cyclonedx-maven-plugin</artifactId>
    <version>2.7.7</version>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>makeAggregateBom</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <projectType>library</projectType>
        <schemaVersion>1.4</schemaVersion>
        <includeBomSerialNumber>true</includeBomSerialNumber>
        <includeCompileScope>true</includeCompileScope>
        <includeProvidedScope>true</includeProvidedScope>
        <includeRuntimeScope>true</includeRuntimeScope>
        <includeSystemScope>true</includeSystemScope>
        <includeTestScope>false</includeTestScope>
        <includeLicenseText>false</includeLicenseText>
        <outputReactorProjects>true</outputReactorProjects>
        <outputFormat>json</outputFormat>
        <outputName>bom</outputName>
        <outputDirectory>${project.build.outputDirectory}/resources</outputDirectory>
        <verbose>false</verbose>
    </configuration>
</plugin>
----

The SBOM file should be generated in the `/resources` sub-directory in the project's output directory. It's a `json` file with the `bom` file name. The plugin is already configured to do it this way.


== Start the Application

AppSec Kit isn't enabled in production mode. Therefore, you need to start your application in debug mode -- or in development mode.

By default, Vaadin 7 applications start in link:https://vaadin.com/docs/v7/framework/application/application-environment#application.environment.parameters.production-mode[debug mode]. You don't need to enable this, explicitly.

To start the application, execute the following from the command-line:

----
mvn jetty:run
----


== Notification Dialog

After the application has started, AppSec Kit analyzes the dependencies, collects the vulnerabilities if any exist, and displays the <<getting-started-notification-dialog>> where you can open the `UI` in a new tab.

To get the notification dialog you should configure https://vaadin.com/docs/v7/framework/advanced/advanced-push[server push] for a `UI` to get notified when new vulnerabilities are found. You can achieve this by adding the `@Push` annotation to a UI class which configures the UI for automatic push:

[source,java]
----
@Push
public class ExampleUI extends UI {
    // ...
}
----

The server push support in Vaadin requires the separate Vaadin Push library. In Maven, add the following dependency:

.pom.xml
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-push</artifactId>
    <version>${vaadin.version}</version>
</dependency>
----

[[getting-started-notification-dialog]]
.AppSec Kit Notification Dialog
image::img/notification-dialog.png[]

.AppSec Kit UI
[TIP]
You can also navigate to the `UI` using the `vaadin-appsec-kit` URL parameter. For example, on your localhost, do something like this: link:http://localhost:8080/?vaadin-appsec-kit[http://localhost:8080/?vaadin-appsec-kit].


== AppSec Kit UI

The AppSec Kit UI has views for seeing vulnerabilities and dependencies of which you should be aware.


=== Vulnerabilities View

When you open the UI, you'll see the *Vulnerabilities* tab (see screenshot here). There you can see the collected vulnerabilities, if any exist. They're shown in a grid view with columns to help identify the vulnerability, the dependency in which it has been found, the severity, a risk score and some analyses. 

You can `Filter` the vulnerabilities by using the Dependency, Developer Analysis, and Severity Level filters. You'd choose these filters from the pull-down menus near the top left, then click the `Filter` button at the top right. Click on the `Clear` button next to it to reset the filters.

[[getting-started-vulnerabilities-tab]]
.AppSec Kit Vulnerabilities View
image::img/vulnerabilities-tab.png[]

To run a new scan, click the `Scan now` button at the top right corner. After it has finished, the `Last Scan` date and time is updated -- located also at the top right.

If you want to see more details about a vulnerability, select the row containing the vulnerability of interest and then click the `Show details` button. Or you can just double-click on a row. The `Vulnerability Details View` is then opened -- which is described next.


=== Vulnerability Details View

When you show the details of a vulnerability, you can find a more detailed description of it (see screentshot). You'll also find there links to other pages to explain the vulnerability and offer some general suggestions to resolve the vulnerability. 

If the Vaadin Security Team is reviewing the vulnerability, it will be noted at the top of the top. This include Vaadin's specific assessment and recommendations related to the vulnerability.

[[getting-started-vulnerability-details-view]]
.AppSec Kit Vulnerability Details View
image::img/vulnerability-details-view.png[]

On the right side of the Details View, there's a `Developer analysis` panel. There you can set the `Vulnerability status` and add your own description and other information you've uncovered. Preserve what you enter by clicking the `Save` button.


=== Dependencies View

To see your application dependencies, click on the *Dependencies* tab at the top left. There you'll find a list of dependencies shown in a grid view (see screenshot here). They're listed in columns to help identify each dependency and the group to which it belongs, the version, the severity, and a risk score. 

[[getting-started-dependencies-tab]]
.AppSec Kit Dependencies View
image::img/dependencies-tab.png[]

You can `Filter` the list of dependencies based on the Dependency Group and the Security Level. You'd do this by choosing one or both of these two filters from the pull-down menus near the top left, then click the `Filter` button at the top right. Click on the `Clear` button next to it to reset the filters.

