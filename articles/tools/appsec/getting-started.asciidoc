---
title: Getting Started
description: Step-by-step guide on how to use AppSec Kit in an application.
order: 10
---


= Getting Started with AppSec Kit

AppSec Kit is an excellent tool for monitoring your application dependencies for vulnerabilities. It lets you see details of discovered vulnerabilities. You can record and store your analysis to share with other developers.


== Add AppSec Kit Dependency

To start, you'll need to add AppSec Kit as a dependency to your application. To add to a Maven project, you might add something like this to your [filename]`pom.xml` file:

.pom.xml
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>appsec-kit-v24</artifactId>
    <version>1.0.5</version>
</dependency>
----

.Version Number
[NOTE]
See the https://github.com/vaadin/appsec-kit/releases[AppSec Kit releases page] for the latest version, or a different version of the dependency.


== Generating SBOM Files

To be able to monitor the application dependencies, AppSec Kit needs a Software Bill of Materials (SBOM) files generated from _Maven_ and _npm_ dependencies. These files contain information about the dependencies and their transitives.

=== Maven Dependencies

To generate the SBOM file from _Maven_ dependencies, you'll need to add the link:https://github.com/CycloneDX/cyclonedx-maven-plugin[cyclonedx-maven-plugin] to the plugins in your [filename]`pom.xml` file like so:

.pom.xml
[source,xml]
----
<plugin>
    <groupId>org.cyclonedx</groupId>
    <artifactId>cyclonedx-maven-plugin</artifactId>
    <version>2.7.7</version>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>makeAggregateBom</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <projectType>library</projectType>
        <schemaVersion>1.4</schemaVersion>
        <includeBomSerialNumber>true</includeBomSerialNumber>
        <includeCompileScope>true</includeCompileScope>
        <includeProvidedScope>true</includeProvidedScope>
        <includeRuntimeScope>true</includeRuntimeScope>
        <includeSystemScope>true</includeSystemScope>
        <includeTestScope>false</includeTestScope>
        <includeLicenseText>false</includeLicenseText>
        <outputReactorProjects>true</outputReactorProjects>
        <outputFormat>json</outputFormat>
        <outputName>bom</outputName>
        <outputDirectory>${project.build.outputDirectory}/resources</outputDirectory>
        <verbose>false</verbose>
    </configuration>
</plugin>
----

The SBOM file, `bom.json` should be generated in the `/resources` sub-directory in the project's output directory. The plugin is configured to do this.

=== npm Dependencies

To generate the SBOM file from _npm_ dependencies, you'll need to install the _link:https://www.npmjs.com/package/@cyclonedx/cyclonedx-npm[@cyclonedx/cyclonedx-npm]_ plugin as a global tool with _npx_:

[source,shell]
----
npx --package @cyclonedx/cyclonedx-npm --call exit
----

and to add it to the plugins using the _exec-maven-plugin_ in your [filename]`pom.xml` file like so:

.pom.xml
[source,xml]
----
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>exec-maven-plugin</artifactId>
    <version>1.3.2</version>
    <executions>
        <execution>
            <id>cyclonedx-npm</id>
            <goals>
                <goal>exec</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
                <executable>npx</executable>
                <arguments>
                    <argument>@cyclonedx/cyclonedx-npm</argument>
                    <argument>--output-file</argument>
                    <argument>target/classes/resources/bom-npm.json</argument>
                    <argument>--output-format</argument>
                    <argument>JSON</argument>
                </arguments>
            </configuration>
        </execution>
    </executions>
</plugin>
----

The SBOM file, `bom-npm.json` should be generated in the `/resources` sub-directory in the project's output directory. The plugin is configured to do this.


=== Start the Application

AppSec Kit isn't enabled in production mode. Therefore, you'll need to start your application in development mode. By default, the Vaadin 24 applications start in <<{articles}/configuration/development-mode#, development mode>>. You don't need to enable this, explicitly.

To start the application, execute the following from the command-line:

----
mvn spring-boot:run
----


=== Debug Tool


==== Notification Dialog

After the application has started, AppSec Kit analyzes the dependencies, collects any vulnerabilities, and displays a notification dialog through the _Debug Tool_ (see screenshot). There you'll see a link, labeled _Learn more_, that you can click on to open the UI in a new tab.

[[debug-tool-notification-dialog]]
.Debug Tool Notification Dialog
image::images/debug-tool-notification-dialog.png[]


==== AppSec Kit Tab

You can also open the _Debug Tool_ and navigate to the _AppSec Kit_ tab where you can find the found vulnerabilities count grouped by severity and a button, labeled `Open AppSec Kit`, that you can click on to open the UI in a new tab.

[[debug-tool-appsec-kit-tab]]
.Debug Tool AppSec Kit Tab
image::images/debug-tool-appsec-kit-tab.png[]

You can also navigate to the UI using the `vaadin-appsec-kit` route. For example, on your localhost, enter something like this in your browser: link:http://localhost:8080/vaadin-appsec-kit[http://localhost:8080/vaadin-appsec-kit].


== AppSec Kit UI

The AppSec Kit UI has views for seeing vulnerabilities and dependencies of which you should be aware. This section describes these views, which can be found under the two main tabs of the UI.


=== Vulnerabilities Tab

When you open the UI, you'll see the *Vulnerabilities* tab (see screenshot here). Any collected vulnerabilities are listed there. They're shown in a grid view with columns to help identify each vulnerability, the ecosystem and the dependency in which each has been found, the severity calculated from the CVSS vector string, a link:https://nvd.nist.gov/vuln-metrics/cvss[CVSS score] and some analyses.

You can filter the vulnerabilities by using the Ecosystem, Dependency, Vaadin analysis, Developer analysis, Severity, and CVSS score filters. You'd choose these filters from the pull-down menus near the top to apply any of the filters automatically. Click on the `Clear` button next to the filters to reset the filters.

[[vulnerabilities-tab]]
.AppSec Kit Vulnerabilities View
image::images/vulnerabilities-tab.png[]

To run a new scan, click the `Scan now` button at the top right corner. After it's finished, the `Last Scan` date and time is updated -- located also at the top right.

If you want to see more details about a vulnerability, select the row containing the vulnerability of interest and then click the `Show details` button. Or you can just double-click on a row. The `Vulnerability Details View` is then opened -- which is described next.


=== Vulnerability Details

When you open a listed vulnerability, you can find a more detailed description of it (see screenshot). You'll also find there links to other pages to explain the vulnerability and offer some general suggestions to resolve the vulnerability.

If the Vaadin Security Team is reviewing the vulnerability, it will be noted at the top. This includes Vaadin's specific assessment and recommendations related to the vulnerability.

[[vulnerability-details]]
.AppSec Kit Vulnerability Details View
image::images/vulnerability-details-view.png[]

On the right side of the Details View, there's a `Developer analysis` panel. There you can set the `Vulnerability status` and add your own description and other information you've uncovered. Preserve what you enter by clicking the `Save` button. Note, your analysis will be available to other developers if you commit it to the version control system.


==== Dependencies Tab

To see your application dependencies, click on the *Dependencies* tab at the top left of the UI. There you'll find a list of dependencies shown in a grid view (see screenshot here). They're listed in columns to help identify each dependency, ecosystem and the group to which it belongs, the version, the is development which marks if a _npm_ dependency is a development dependency (for _Maven_ dependencies this is always _false_), the count of vulnerabilities, the highest severity, and the highest CVSS score.

[[dependencies-tav]]
.AppSec Kit Dependencies View
image::images/dependencies-tab.png[]

You can filter the list of dependencies based on the Dependency name, Ecosystem, Dependency group, Is development?, Security, and the CVSS score. Youâ€™d choose these filters from the pull-down menus near the top to apply any of the filters automatically. Click on the `Clear` button next to the filters to reset the filters.
