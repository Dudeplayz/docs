---
title: Theme Editor
description: Change the color, font size etc. of web components in your views without touching code.
section-nav: commercial
---

= [since:com.vaadin:vaadin@V24.1]#Theme Editor#

//:commercial-feature: Theme Editor
//include::{articles}/_commercial-banner.asciidoc[opts=optional]

Theme Editor is a tool for editing the theme of your Vaadin applications in development mode. Use it to change the color, font size, etc. of web components in your views without touching code. 

Any changes you make are reflected in real-time both in the live preview and your code.

[NOTE]
.Theme Editor is in preview.
Theme Editor is not a final product but is available in a free preview.

image::images/theme-editor.png[Theme Editor running in a Vaadin application.]

== Features

The following features are supported in the preview:

Select components with a click::
Click a component you want to style. Both Vaadin and common HTML components are supported.

Edit a component::
Style individual components with the visual editor and automatically update your code to reflect the changes you make. For example, pick a <<{articles}/components/button#,Button>> in your view and make it appear green instead of the default blue.

Edit multiple components::
Create universal style rules by editing all components of the same type. For example, make every <<./#Button,Button>> appear green.

Locate code changes::
Open the code in your IDE where your changes have been applied with a click.

== Getting Started with Theme Editor

Start by running your Vaadin application project in <<{articles}/configuration/development-mode#,Development Mode>>. Click on the Vaadin symbol }> at the bottom right-hand corner of your browser window to open Development Tools.

Theme Editor is available behind a <<{articles}/configuration/feature-flags#,Feature Flag>>. You can enable it in the [guilabel]`Feature Flags` tab and use it after restarting your server.

Theme Editor is only compatible with Lumo-based themes. <<{articles}/styling/lumo#,Lumo>> is the default theme for Vaadin applications.

=== Selecting Components

Start selecting components by clicking the + sign in Theme Editor. You can then highlight components in your view by hovering your mouse cursor over them and pick a component for editing by clicking on it with your primary mouse button. You can navigate between components in the different layers of your layout with the arrow keys on your keyboard.

image::images/pick-component-2.png[Pick an element to get started.]

==== Vaadin Components

Vaadin components show a list of available elements and properties that can be stylized.

==== Common HTML Components

Theme Editor allows selecting common HTML components, such as `<h1>`, `<p>`, and `<div>`, in addition to Vaadin components. You can style their text, border, and color-based properties.

=== Understanding the User Interface

image::images/theme-editor-ui.png[The Theme Editor User Interface.]

1. The button for selecting components and the name of the selected component (and its friendly display name)
2. Switch between Local and Global editing
3. Undo and Redo changes
4. The CSS class name for styling the component instance in Local editing mode
5. The name of the component properties section
6. The button for jumping to the CSS rule definition
7. List of component properties with editable values. Modified values are marked with an orange indicator

=== Local and Global Editing Modes

image::images/local-global.png[Swith between Local And Global editing modes.]

You can choose the scope for changes, either Local - for the selected component only, or Global - for all components of a given type.

==== Local

In Local mode, Theme Editor uses a unique class name to distinguish the selected component.
Theme Editor suggests new a new name if there is none.

image::images/local-classname.png[Setting a local CSS class name.]

When you're applying the class name in Java code, Theme Editor adds an `addClassName` call with a `<theme-editor-local-classname>` comment above it:

[source,java]
----
//<theme-editor-local-classname>
textField.addClassName("my-text-field");
----

Do not delete the comment or Theme Editor loses track of the class name it applied.

==== Global

In Global mode, Theme Editor writes CSS rules that apply to all components of a given type.

[NOTE]
.Local rules have priority over Global rules.

=== Styling Component Elements

Theme Editor displays a list of editable elements after you selected a component, with properties that can be modified.
For example, the screenshot below shows the properties of a [guilabel]Label element that are a part of <<{articles}/components/text-field#,Text Field>>.

image::images/single-element.png[Styling a component element,75%]


==== Using Color Picker

You can use the built-in color picker to choose a custom color. Theme Editor also suggests som pre-defined colors that are related to the given property.

image::images/color-picker.png[Using the color picker, 50%]

1. Color selection
2. Opacity slider
3. Suggested colors

=== Slider

You can change common property values, such as font size and spacing, by using the slider.

image::images/slider-1.png[Slider]

You can also set custom values. When you set a custom value the indicator on the slide turns dark and moves to the beginning.

image::images/slider-2.png[Slider with custom value]

== Code Generation

Theme Editor saves CSS rules into a `theme-editor.css` file within your application theme directory.

[NOTE]
.Changing values manually.
You can change values manually in the `theme-editor.css` file. Theme Editor processes the changes and formats your application accordingly.

== Limitations

The preview comes with some limitations:

- You need to use the Lumo theme
- You cannot change global Lumo theme variables
- Styling component states, like hover, required, and invalid, are not supported
- Adding or styling theme variants, for example, primary buttons, is not supported
- Not all Vaadin components are supported
- You cannot modify Java classes manually without building and deploying (hot deployment) when using Theme Editor

Use the https://github.com/vaadin/flow[GitHub Flow repository] for reporting bugs, asking questions, and proposing enhancement ideas.

[discussion-id]`AC548300-ED41-4A1B-AD9D-80FD719CEA70`
