---
title: Getting Started
order: 20
---

= Getting Started with Theme Editor

Before starting using Theme Editor make sure that project is set up properly.

== Setting Up Your Project

Theme Editor is a part of Vaadin Development Tools and is available behind feature flag.

Read more about <<{articles}/configuration/development-mode#,Development Mode>> and <<{articles}/configuration/feature-flags#,Feature Flags>>

Theme Editor requires application theme to be present.

<<{articles}/styling/application-theme#, Read more about Application Theme>>

Theme Editor is compatible only with Lumo-based themes.

<<{articles}/styling/lumo#,Read more about Lumo theme>>

== Selecting Components

To begin using Theme Editor select component you want to style.

image::images/pick-component-2.png[Pick an element to get started]

Component picker allows navigating through different layers of layout allowing to select exact component.

=== Vaadin Components

Selected Vaadin component has list of available elements and properties that can be styled.

=== Common HTML Components

In addition to Vaadin components, Theme Editor allows selecting common HTML components like `<h1>`, `<p>` or `<div>`.
User can style text, border and color related properties.

== User Interface

image::images/theme-editor-ui.png[Theme Editor User Interface]

1. Component picker button with name of currently selected component (and friendly display name)
2. Local / Global mode switch
3. Undo and Redo
4. CSS class name to be used for styling component instance in Local mode
5. Component properties section name
6. Jump to CSS rule definition button
7. Component properties list with editable values, modified values marked with orange indicator

== Local and Global Modes

image::images/local-global.png[Local And Global Mode Switch]

Theme Editor allows to choose scope of changes, Local - for selected component only, Global - for all components of given type.

=== Local

image::images/local-classname.png[Setting local CSS class name]

In Local mode, Theme Editor uses unique class name to distinguish selected component.
If there is none existing yet, Theme Editor suggests new.

When applying the class name in the Java code, Theme Editor adds an `addClassName` call with a `<theme-editor-local-classname>` comment above it:

[source,java]
----
//<theme-editor-local-classname>
textField.addClassName("my-text-field");
----

Do not remove the comment, otherwise Theme Editor will lose track of the class name it has applied.

=== Global

In Global mode, Theme Editor writes CSS rules that are applicable to all components of given type.

[NOTE]
Local rules have priority over Global rules.

== Styling Component Elements

image::images/single-element.png[Component Element,75%]

After selecting component, Theme Editor displays list of editable elements with properties that can be modified.
On screenshot above there is Label element with its properties that is part of Text Field.

=== Color Picker

User can use built-in color picker for choosing own color or one of the predefined colors that are related to given property.

image::images/color-picker.png[Color Picker, 50%]

1. Color selection
2. Opacity
3. Suggested colors

=== Slider

image::images/slider-1.png[Slider]

Theme Editor uses slider to allow easily modify common property values like font size or spacing.

image::images/slider-2.png[Slider with custom value]

User can also use custom values not handled by slider. When custom value is set, value indicator has dark background and is placed at beginning of the slider.

== Code Generation

Theme Editor saves CSS rules into `theme-editor.css` within current theme directory.

[NOTE]
Manual modifications of `theme-editor.css` are processed by Theme Editor and formatted accordingly.

== Limitations

As it is free developer preview, there are still some limitations:

- Only applications using the Lumo theme are supported
- Changing the global Lumo theme variables is not supported
- Styling component states, like hover, required and invalid, is not supported
- Adding or styling theme variants, for example primary buttons, is not supported
- Not all Vaadin components are supported at the moment
- Manual modification of Java classes without build and deploy (hot deployment) results in Theme Editor not be able to select  components

Please use https://github.com/vaadin/flow[GitHub Flow repository] for bugs / questions / enhancements ideas submission.