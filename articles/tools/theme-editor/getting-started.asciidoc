---
title: Getting Started
order: 20
---

= Getting Started with Theme Editor

Before starting using Theme Editor make sure that project is set up properly.

== Setting Up Your Project

Theme Editor is a part of Vaadin Development Tools and is available behind feature flag.

<<configuration#,Read more about Development Mode and Feature Flags>>

Theme Editor requires application theme to be present.

<<styling-components-with-css/application-theme#, Read more about Application Theme>>

== Picking components

To begin using Theme Editor pick component you want to style.

image::images/pick-component-2.png[Pick an element to get started]

Component picker allows navigating through different layers of layout allowing to pick exact component.

== Interface explained

image::images/theme-editor-ui.png[Theme Editor User Interface]

1. Component picker button with name of currently picked component (and friendly value)
2. Local / Global mode switch
3. Undo and Redo
4. CSS class name to be used for styling component instance in Local mode
5. Component properties section name
6. Jump to CSS rule definition button
7. Component properties list with editable values

== Local And Global Modes

image::images/local-global.png[Local And Global Mode Switch]

Theme Editor allows to choose scope of changes, Local - for given component only, Global - for all components of given type.

=== Local

image::images/local-classname.png[Setting local CSS class name]

In Local mode, Theme Editor uses unique class name to distinguish given component. If there is none, Theme Editor suggests new class name specific for given component.

[NOTE]
Class name is applied to component using `addClassName` method call with `<theme-editor-local-classname>` annotation. Theme Editor will lose track of component if modified manually.

=== Global

In Global mode, Theme Editor writes CSS rules that are applicable to all components of given type.

[NOTE]
Local rules have priority over Global rules.

== Styling Component Elements

image::images/single-element.png[Component Element,75%]

After picking component, Theme Editor displays list of editable elements with properties that can be modified. On screenshot above you can see Label element with its properties that is part of Text Field.

=== Color picker

User can use built-in color picker for choosing own color or one of the predefined colors that are related to given property.

image::images/color-picker.png[Color Picker, 50%]

1. Color selection
2. Opacity
3. Suggested colors

=== Slider

image::images/slider-1.png[Slider]

Theme Editor uses slider to allow easily modify common property values like font size or spacing.

image::images/slider-2.png[Slider with custom value]

User can also use custom values not handled by slider.

== Code Generation

Theme Editor saves CSS rules into `theme-editor.css` within current theme directory.

[NOTE]
Manual modifications of `theme-editor.css` will be processed by Theme Editor and may be formatted accordingly.

== Limitations

As it is free developer preview, there are still some limitations that some of them we are aware of, like:

- manual modification of Java classes without build and deploy (hot deployment) results in Theme Editor